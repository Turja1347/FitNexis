# streamlit_app.py

import streamlit as st
import google.generativeai as genai
import os
import datetime
import re
import json

from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.lib.units import inch


# --- API Key Configuration ---
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY") or "AIzaSyDgG4HFTp7Z3kYdyRqdDKydxxPjpXIEnVs"

if not GEMINI_API_KEY:
    st.error("GEMINI_API_KEY is not set. Please configure it in environment variables or Streamlit secrets.")
    st.stop()

# Configure the Generative AI model with the API key
genai.configure(api_key=GEMINI_API_KEY)

# --- Calculator Class ---
# Handles BMI, BMR, and TDEE calculations.
class Calculator:
    def calculate_bmi(self, weight_kg: float, height_cm: float) -> float:
        """
        Calculates Body Mass Index (BMI).
        BMI = weight (kg) / (height (m))^2
        """
        height_m = height_cm / 100
        return weight_kg / (height_m ** 2) if height_m else 0.0

    def calculate_bmr(self, gender: str, age: int, height_cm: float, weight_kg: float) -> float:
        """
        Calculates Basal Metabolic Rate (BMR) using the Mifflin-St Jeor equation.
        For men: (10 * weight_kg) + (6.25 * height_cm) - (5 * age) + 5
        For women: (10 * weight_kg) + (6.25 * height_cm) - (5 * age) - 161
        """
        if gender.lower() == 'male':
            return (10 * weight_kg) + (6.25 * height_cm) - (5 * age) + 5
        elif gender.lower() == 'female':
            return (10 * weight_kg) + (6.25 * height_cm) - (5 * age) - 161
        return 0.0 # Return 0 for 'Other' or invalid gender

    def calculate_tdee(self, bmr: float, activity_level: str) -> float:
        """
        Calculates Total Daily Energy Expenditure (TDEE) based on BMR and activity level.
        Activity factors are standard multipliers.
        """
        activity_factors = {
            'sedentary': 1.2, # little to no exercise
            'light': 1.375,   # light exercise/sports 1-3 days/week
            'moderate': 1.55, # moderate exercise/sports 3-5 days/week
            'active': 1.725,  # hard exercise/sports 6-7 days/week
            'very active': 1.9 # very hard exercise/physical job
        }
        return bmr * activity_factors.get(activity_level.lower(), 1.2) # Default to sedentary if not found

# --- LLMIntegrator Class ---
# Handles interaction with the Google Gemini model.
class LLMIntegrator:
    def __init__(self):
        # Initialize the GenerativeModel with 'gemini-1.5-flash' for faster responses
        self.model = genai.GenerativeModel('gemini-1.5-flash')

    def generate_content(self, prompt: str) -> str:
        """
        Generates text content using the configured Gemini model based on a given prompt.
        Includes basic error handling for API calls.
        """
        try:
            response = self.model.generate_content(prompt)
            # Check if the response has text content and it's not empty
            if hasattr(response, 'text') and response.text.strip():
                return response.text
            return "⚠️ No content generated by the AI. Please try again."
        except Exception as e:
            # Catch and display any exceptions during API call
            st.error(f"Gemini API Error: {e}")
            return f"Error generating content: {e}"

# --- WorkoutGenerator Class ---
# Generates personalized workout plans using the LLM.
class WorkoutGenerator:
    def __init__(self):
        self.llm = LLMIntegrator()

    def generate_workout_plan(self, age: int, gender: str, weight: float, height: float, goal: str, activity: str, location: str) -> str:
        """
        Constructs a prompt for the LLM to generate a workout plan
        in a detailed markdown format for a "box-type" output.
        """
        prompt = f"""
        Generate a personalized {location.lower()} workout plan for a {age}-year-old {gender}
        who is {activity.lower()} active and wants to {goal.lower()}.

        Provide a 3-4 day plan. For each day, structure the output precisely as follows:

        **Day [Number]: [Day Focus, e.g., Full Body Strength]**
        * **Warm-up:** [Describe 5-10 minutes of warm-up activities, e.g., "5-10 minutes of light cardio (jogging, cycling) followed by dynamic stretches (arm circles, leg swings)."]
        * **Exercises:**
            * **[Exercise Name 1]:** [Number] sets of [Reps] reps, [Rest] seconds rest. _Safety Tip:_ [Brief safety instruction].
            * **[Exercise Name 2]:** [Number] sets of [Reps] reps, [Rest] seconds rest. _Safety Tip:_ [Brief safety instruction].
            * **[Exercise Name 3]:** [Number] sets of [Reps] reps, [Rest] seconds rest. _Safety Tip:_ [Brief safety instruction].
            * (Add 1-3 more exercises following this exact format)
        * **Cool-down:** [Describe 5-10 minutes of cool-down activities, e.g., "5-10 minutes of static stretching, holding each stretch for 20-30 seconds (e.g., hamstring stretch, quad stretch)."]

        Ensure all details for an exercise (sets, reps, rest, safety) are on the **same line** as the exercise name, following the nested bullet point. Use clear markdown formatting for bolding and nesting.
        """
        return self.llm.generate_content(prompt)

# --- DietGenerator Class ---
# Generates personalized diet plans using the LLM and calculator.
class DietGenerator:
    def __init__(self):
        self.llm = LLMIntegrator()
        self.calc = Calculator()

    def generate_diet_plan(self, age: int, gender: str, weight: float, height: float, activity: str, goal: str, diet_type: str) -> str:
        """
        Calculates target calories and macronutrients, then constructs a prompt
        for the LLM to generate a diet plan.
        """
        bmr = self.calc.calculate_bmr(gender, age, height, weight)
        tdee = self.calc.calculate_tdee(bmr, activity)

        # Adjust target calories based on fitness goal
        target_calories = tdee
        if goal == "Build Muscle":
            target_calories = tdee + 300 # Calorie surplus for muscle gain
        elif goal == "Lose Weight":
            target_calories = tdee - 500 # Calorie deficit for weight loss
        # For "Maintain", target_calories remains TDEE

        # Define macronutrient ratios (Protein, Carbs, Fats)
        # These ratios are approximate and can be fine-tuned.
        macros = {
            "Build Muscle": (0.35, 0.45, 0.20), # 35% Protein, 45% Carbs, 20% Fats
            "Lose Weight": (0.40, 0.30, 0.30),  # 40% Protein, 30% Carbs, 30% Fats
            "Maintain": (0.30, 0.50, 0.20)      # 30% Protein, 50% Carbs, 20% Fats
        }.get(goal, (0.30, 0.50, 0.20)) # Default to Maintain ratios

        # Calculate macronutrients in grams (4 kcal/g for protein/carbs, 9 kcal/g for fats)
        protein_g = int((target_calories * macros[0]) / 4)
        carbs_g = int((target_calories * macros[1]) / 4)
        fats_g = int((target_calories * macros[2]) / 9)

        prompt = f"""
        Generate a {diet_type.lower()} diet plan for one day.
        The plan should aim for approximately {int(target_calories)} kcal.
        Macronutrient breakdown: Protein: {protein_g}g, Carbs: {carbs_g}g, Fat: {fats_g}g.
        Include meals: Breakfast, Lunch, Dinner, and 1-2 healthy snacks.
        For each meal, include:
        - A brief description of the meal.
        - A list of main ingredients with approximate quantities.
        - Estimated calories and macronutrients for that specific meal.
        - Practical tips for preparation or variations.
        Ensure the plan is balanced and suitable for a {diet_type.lower()} diet.
        """
        return self.llm.generate_content(prompt)

# --- PDFGenerator Class ---
class PDFGenerator:
    def _convert_markdown_to_reportlab_html(self, text):
        """
        Converts a subset of Markdown (bold, italic) to ReportLab's RML.
        Replaces markdown list markers with the HTML bullet entity.
        """
        # Convert bold markdown **text** to <b>text</b>
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        # Convert italic markdown *text* to <i>\1</i>
        text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
        # Convert italic markdown _text_ to <i>\1</i>
        text = re.sub(r'_(.*?)_', r'<i>\1</i>', text)

        # Replace standard markdown list markers with the HTML bullet entity.
        # This function is now responsible only for HTML conversion,
        # not adding ReportLab's <bullet> tags.
        text = text.replace('* ', '&bull; ')
        text = text.replace('- ', '&bull; ')
        
        # Replace multiple newlines with a single one for cleaner paragraphs
        text = re.sub(r'\n\s*\n', '\n\n', text)
        return text

    def generate_plan_pdf(self, filename: str, user_data: dict, bmi: float, bmr: float, tdee: float, workout_plan_raw: str, diet_plan_raw: str):
        """
        Generates a PDF document containing the user's profile, calculated metrics,
        and the generated workout and diet plans.
        """
        doc = SimpleDocTemplate(filename, pagesize=letter)
        styles = getSampleStyleSheet()

        # ✅ Use CUSTOM style names to avoid conflicts with ReportLab's built-in styles
        styles.add(ParagraphStyle(name='MyTitle', parent=styles['Heading1'], fontSize=20, leading=24, alignment=TA_CENTER, spaceAfter=12))
        styles.add(ParagraphStyle(name='MyHeading', parent=styles['Heading2'], fontSize=16, leading=20, alignment=TA_LEFT, spaceAfter=8))
        styles.add(ParagraphStyle(name='MyBody', parent=styles['Normal'], fontSize=10, leading=12, spaceAfter=6))
        
        # Style for primary bullet points (e.g., Warm-up, Exercises, Cool-down)
        styles.add(ParagraphStyle(name='MyBullet', parent=styles['Normal'], leftIndent=0.2 * inch, firstLineIndent=-0.2 * inch, fontSize=10, leading=12))
        
        # Style for nested bullet points (e.g., individual exercises)
        styles.add(ParagraphStyle(name='MyNestedBullet', parent=styles['Normal'], leftIndent=0.5 * inch, firstLineIndent=-0.2 * inch, fontSize=10, leading=12))
        
        styles.add(ParagraphStyle(name='MyDisclaimer', parent=styles['Normal'], fontSize=8, leading=10, alignment=TA_LEFT, textColor='#888888', spaceBefore=10))

        story = []

        # --- Title Page ---
        story.append(Paragraph("Your Personalized Fitness & Diet Plan", styles['MyTitle']))
        story.append(Spacer(1, 0.2 * inch))
        story.append(Paragraph("Generated by Smart Fitness & Diet App", styles['Heading3'])) # Using a default ReportLab style here
        story.append(Spacer(1, 0.4 * inch))

        # --- User Profile Summary ---
        story.append(Paragraph("Your Profile Summary", styles['MyHeading']))
        for label, value in [
            ("Age", f"{user_data['age']} years"),
            ("Gender", user_data['gender']),
            ("Weight", f"{user_data['weight']} kg"),
            ("Height", f"{user_data['height']} cm"),
            ("Fitness Goal", user_data['fitness_goal']),
            ("Activity Level", user_data['activity_level'].replace('_', ' ').title()), # Format activity level nicely
            ("Diet Type", user_data['diet_type']),
            ("Workout Type", user_data['workout_type']),
            ("BMI", f"{bmi:.2f}"),
            ("BMR", f"{bmr:.2f} kcal/day"),
            ("TDEE", f"{tdee:.2f} kcal/day")
        ]:
            story.append(Paragraph(f"<b>{label}:</b> {value}", styles['MyBody']))
        story.append(PageBreak())

        # --- Workout Plan Section ---
        story.append(Paragraph("Your Personalized Workout Plan", styles['MyHeading']))
        story.append(Spacer(1, 0.1 * inch))
        
        # Loop through each line of the raw workout plan
        for line in workout_plan_raw.strip().split('\n'):
            if line.strip(): # Only process non-empty lines
                # Count leading spaces to determine indentation level
                leading_spaces = len(line) - len(line.lstrip(' '))
                
                # Convert markdown to ReportLab HTML
                html_line = self._convert_markdown_to_reportlab_html(line.strip()) # strip() here to clean line before conversion

                # Determine which style to apply based on content and indentation
                if re.match(r'^<b\>Day\s\d+\:', html_line): # Matches "**Day X: ...**"
                    story.append(Paragraph(html_line, styles['MyHeading']))
                elif html_line.strip().startswith('&bull;'): # Check for bullet after stripping
                    if leading_spaces >= 4: # Assuming 4+ spaces for nested bullet
                        story.append(Paragraph(html_line, styles['MyNestedBullet']))
                    else: # Primary bullet
                        story.append(Paragraph(html_line, styles['MyBullet']))
                else: # Default body text
                    story.append(Paragraph(html_line, styles['MyBody']))
                story.append(Spacer(1, 0.05 * inch)) # Small space after each line


        story.append(Paragraph(
            "<b>Disclaimer:</b> This plan is AI-generated and for informational purposes only. Always consult with a qualified fitness professional or healthcare provider before starting any new exercise routine.",
            styles['MyDisclaimer']
        ))
        story.append(PageBreak())

        # --- Diet Plan Section ---
        story.append(Paragraph("Your Personalized Diet Plan", styles['MyHeading']))
        story.append(Spacer(1, 0.1 * inch))
        for line in diet_plan_raw.strip().split('\n'):
            if line.strip():
                html_line = self._convert_markdown_to_reportlab_html(line)
                if html_line.strip().startswith('&bull;'):
                    story.append(Paragraph(html_line, styles['MyBullet']))
                else:
                    story.append(Paragraph(html_line, styles['MyBody']))
                story.append(Spacer(1, 0.05 * inch))

        story.append(Paragraph(
            "<b>Disclaimer:</b> This diet plan is AI-generated and provides estimates. It is recommended to consult a registered dietitian for personalized advice.",
            styles['MyDisclaimer']
        ))

        # Build the PDF document
        doc.build(story)

# --- Load/Save History Functions ---
# Manages saving and loading generated plans to/from a JSON file.
HISTORY_FILE = "instance/history.json"

def load_history() -> list:
    """Loads the history of generated plans from a JSON file."""
    # Ensure the 'instance' directory exists
    if not os.path.exists("instance"):
        os.makedirs("instance")
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            st.warning(f"Could not decode JSON from {HISTORY_FILE}. Starting with empty history.")
            return []
        except Exception as e:
            st.error(f"Error loading history: {e}")
            return []
    return []

def save_plan(plan: dict):
    """Saves a newly generated plan to the history file."""
    history = load_history() # Load existing history
    history.insert(0, plan) # Add new plan to the beginning
    # Limit history to a reasonable number of entries (e.g., 20) to prevent large files
    history = history[:20]
    try:
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, indent=4) # Save with pretty-printing
    except Exception as e:
        st.error(f"Error saving plan to history: {e}")

# --- Streamlit UI Setup ---
# Configures the Streamlit page and manages navigation.
st.set_page_config(
    page_title="Smart Fitness & Diet Planner",
    page_icon="💪",
    layout="centered", # Can be "wide" for more space
    initial_sidebar_state="expanded"
)

# Initialize session state variables if they don't exist
if 'page' not in st.session_state:
    st.session_state.page = 'home' # Default page is 'home'
if 'plan' not in st.session_state:
    st.session_state.plan = None # Stores the current generated plan

# --- Sidebar Navigation ---
st.sidebar.title("Navigation")
# Buttons to change the current page in session state
if st.sidebar.button("🏠 Home", use_container_width=True):
    st.session_state.page = 'home'
if st.sidebar.button("📊 Dashboard", use_container_width=True):
    # Only allow navigating to dashboard if a plan has been generated
    if st.session_state.plan:
        st.session_state.page = 'dashboard'
    else:
        st.sidebar.warning("Please generate a plan first to view the dashboard.")
if st.sidebar.button("📜 History", use_container_width=True):
    st.session_state.page = 'history'

# --- Main Content Area based on Session State ---

# Home Page: User Input Form
if st.session_state.page == 'home':
    st.title("Smart Fitness & Diet Planner")
    st.markdown("Enter your details to get a personalized fitness and diet plan!")

    with st.form("plan_generation_form", clear_on_submit=False):
        st.subheader("Your Personal Details")
        col1, col2 = st.columns(2)
        with col1:
            age = st.number_input("Age (years)", min_value=10, max_value=100, value=25, step=1, help="Your current age.")
            gender = st.selectbox("Gender", ["Male", "Female", "Other"], help="Your biological sex for BMR calculation.")
            weight = st.number_input("Weight (kg)", min_value=30.0, max_value=300.0, value=70.0, step=0.5, help="Your weight in kilograms.")
        with col2:
            height = st.number_input("Height (cm)", min_value=100.0, max_value=250.0, value=170.0, step=0.5, help="Your height in centimeters.")
            fitness_goal = st.selectbox("Fitness Goal", ["Build Muscle", "Lose Weight", "Maintain"], help="What is your primary fitness objective?")
            activity_level = st.selectbox("Activity Level", [
                "Sedentary (little to no exercise)",
                "Light (light exercise/sports 1-3 days/week)",
                "Moderate (moderate exercise/sports 3-5 days/week)",
                "Active (hard exercise/sports 6-7 days/week)",
                "Very Active (very hard exercise/physical job)"
            ], help="How active are you normally?")
        
        st.subheader("Plan Preferences")
        col3, col4 = st.columns(2)
        with col3:
            diet_type = st.selectbox("Diet Type", ["Vegetarian", "Non-vegetarian", "Vegan"], help="Your preferred dietary restrictions.")
        with col4:
            workout_type = st.selectbox("Workout Type", ["Gym-based", "Home-based"], help="Where do you prefer to workout?")

        submitted = st.form_submit_button("Generate Plan 💪", use_container_width=True)

        if submitted:
            # Map activity level description to short key for calculations
            activity_map = {
                "Sedentary (little to no exercise)": "sedentary",
                "Light (light exercise/sports 1-3 days/week)": "light",
                "Moderate (moderate exercise/sports 3-5 days/week)": "moderate",
                "Active (hard exercise/sports 6-7 days/week)": "active",
                "Very Active (very hard exercise/physical job)": "very active"
            }
            activity_short = activity_map.get(activity_level, "sedentary") # Default to sedentary if map fails

            # Store user data in a dictionary
            user_data = {
                'age': age,
                'gender': gender,
                'weight': weight,
                'height': height,
                'fitness_goal': fitness_goal,
                'activity_level': activity_short,
                'diet_type': diet_type,
                'workout_type': workout_type
            }

            # Initialize calculators and generators
            calc = Calculator()
            workout_gen = WorkoutGenerator()
            diet_gen = DietGenerator()

            # Perform calculations
            bmi = calc.calculate_bmi(weight, height)
            bmr = calc.calculate_bmr(gender, age, height, weight)
            tdee = calc.calculate_tdee(bmr, activity_short)

            # Generate plans with a spinner for user feedback
            with st.spinner("Generating your personalized plan... This may take a moment."):
                workout_plan = workout_gen.generate_workout_plan(age, gender, weight, height, fitness_goal, activity_short, workout_type)
                diet_plan = diet_gen.generate_diet_plan(age, gender, weight, height, activity_short, fitness_goal, diet_type)

            # Store the complete plan data in session state
            plan_data = {
                'user_data': user_data,
                'bmi': bmi,
                'bmr': bmr,
                'tdee': tdee,
                'workout_plan_raw': workout_plan, # This is now raw markdown text
                'diet_plan_raw': diet_plan,
                'timestamp': datetime.datetime.now().isoformat() # Store timestamp for history
            }
            st.session_state.plan = plan_data
            save_plan(plan_data) # Save the plan to history
            st.session_state.page = 'dashboard' # Navigate to dashboard
            st.rerun() # Rerun the app to update the page

# Dashboard Page: Display current plan and download option
elif st.session_state.page == 'dashboard':
    if st.session_state.plan:
        plan = st.session_state.plan
        user = plan['user_data']
        st.header("🏋️ Your Personalized Fitness & Diet Plan")
        st.markdown(f"**Generated on:** {datetime.datetime.fromisoformat(plan['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}")
        st.markdown("---")

        st.subheader("📊 Your Health Metrics Explained")
        
        # Display BMI with interpretation
        bmi = plan['bmi']
        bmi_interpretation = ""
        if bmi < 18.5:
            bmi_interpretation = " (Underweight)"
        elif 18.5 <= bmi < 24.9:
            bmi_interpretation = " (Normal weight)"
        elif 25 <= bmi < 29.9:
            bmi_interpretation = " (Overweight)"
        else:
            bmi_interpretation = " (Obese)"
        st.info(f"**BMI (Body Mass Index):** {bmi:.2f}{bmi_interpretation}")
        st.markdown("<i>Your BMI helps assess if your weight is healthy in proportion to your height.</i>", unsafe_allow_html=True)

        # Display BMR with explanation
        bmr = plan['bmr']
        st.info(f"**BMR (Basal Metabolic Rate):** {bmr:.2f} kcal/day")
        st.markdown("<i>This is roughly how many calories your body burns at rest, just to keep basic functions going.</i>", unsafe_allow_html=True)

        # Display TDEE with explanation
        tdee = plan['tdee']
        st.info(f"**TDEE (Total Daily Energy Expenditure):** {tdee:.2f} kcal/day")
        st.markdown("<i>This is the total number of calories your body burns in a day, including your activity level. It's your estimated daily calorie need to maintain your current weight.</i>", unsafe_allow_html=True)
        st.markdown("---")

        st.subheader("💪 Workout Plan")
        # Use st.markdown to render the workout plan (it supports basic markdown)
        st.markdown(plan['workout_plan_raw']) # Reverted to direct markdown display
        st.markdown("---") # Separator for the whole workout section


        st.subheader("🍎 Diet Plan")
        # Use st.markdown to render the diet plan
        st.markdown(plan['diet_plan_raw'])
        st.markdown("---")

        # PDF Download Section
        st.subheader("Download Your Plan")
        pdf_name = f"SmartPlan_{user['age']}_{user['gender']}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}.pdf"
        pdf_path = os.path.join("instance", pdf_name)

        # Ensure the 'instance' directory exists before generating PDF
        if not os.path.exists("instance"):
            os.makedirs("instance")

        # Generate the PDF
        try:
            PDFGenerator().generate_plan_pdf(
                pdf_path, user, plan['bmi'], plan['bmr'], plan['tdee'],
                plan['workout_plan_raw'], plan['diet_plan_raw']
            )
            # This is the download button. It only appears if PDF generation is successful.
            with open(pdf_path, "rb") as f:
                st.download_button(
                    label="📥 Download Plan as PDF",
                    data=f.read(),
                    file_name=pdf_name,
                    mime="application/pdf",
                    use_container_width=True
                )
            st.success("Plan generated and ready for download!")
        except Exception as e:
            st.error(f"Error generating PDF: {e}")
            st.warning("PDF generation failed. You can still view the plan above.")
    else:
        st.warning("No plan available. Please generate a plan from the Home page.")
        if st.button("Go to Home"):
            st.session_state.page = 'home'
            st.rerun()

# History Page: Display past generated plans
elif st.session_state.page == 'history':
    st.title("📜 Past Plans")
    history = load_history()

    if not history:
        st.info("No past plans found. Generate a plan on the Home page to see it here!")
    else:
        # Iterate through the history and display each plan in an expander
        for i, plan in enumerate(history):
            user = plan['user_data']
            timestamp = datetime.datetime.fromisoformat(plan['timestamp']).strftime('%Y-%m-%d %H:%M')
            
            # Create an expander for each historical plan
            with st.expander(f"**{timestamp}** | {user['gender']} | {user['age']} yrs | Goal: {user['fitness_goal']}"):
                st.markdown(f"**Weight:** {user['weight']} kg, **Height:** {user['height']} cm")
                st.markdown(f"**Activity:** {user['activity_level'].replace('_', ' ').title()}, **Diet:** {user['diet_type']}, **Workout:** {user['workout_type']}")
                
                # Display BMI with interpretation in history
                bmi = plan['bmi']
                bmi_interpretation = ""
                if bmi < 18.5:
                    bmi_interpretation = " (Underweight)"
                elif 18.5 <= bmi < 24.9:
                    bmi_interpretation = " (Normal weight)"
                elif 25 <= bmi < 29.9:
                    bmi_interpretation = " (Overweight)"
                else:
                    bmi_interpretation = " (Obese)"
                st.markdown(f"**BMI:** {bmi:.2f}{bmi_interpretation}")
                
                # Display BMR and TDEE with simple explanations in history
                st.markdown(f"**BMR:** {plan['bmr']:.2f} kcal/day (Calories burned at rest)")
                st.markdown(f"**TDEE:** {plan['tdee']:.2f} kcal/day (Total daily calories burned)")
                
                st.subheader("Workout Plan")
                st.markdown(plan['workout_plan_raw']) # Reverted to direct markdown display
                
                st.subheader("Diet Plan")
                st.markdown(plan['diet_plan_raw'])
                
                st.markdown("---") # Separator for readability
